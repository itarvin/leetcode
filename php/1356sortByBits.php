<?php
/*
* 1356. 根据数字二进制下 1 的数目排序
难度
简单

110

收藏

分享
切换为英文
接收动态
反馈
给你一个整数数组 arr 。请你将数组中的元素按照其二进制表示中数字 1 的数目升序排序。

如果存在多个数字二进制中 1 的数目相同，则必须将它们按照数值大小升序排列。

请你返回排序后的数组。



示例 1：

输入：arr = [0,1,2,3,4,5,6,7,8]
输出：[0,1,2,4,8,3,5,6,7]
解释：[0] 是唯一一个有 0 个 1 的数。
[1,2,4,8] 都有 1 个 1 。
[3,5,6] 有 2 个 1 。
[7] 有 3 个 1 。
按照 1 的个数排序得到的结果数组为 [0,1,2,4,8,3,5,6,7]
示例 2：

输入：arr = [1024,512,256,128,64,32,16,8,4,2,1]
输出：[1,2,4,8,16,32,64,128,256,512,1024]
解释：数组中所有整数二进制下都只有 1 个 1 ，所以你需要按照数值大小将它们排序。
示例 3：

输入：arr = [10000,10000]
输出：[10000,10000]
示例 4：

输入：arr = [2,3,5,7,11,13,17,19]
输出：[2,3,5,17,7,11,13,19]
示例 5：

输入：arr = [10,100,1000,10000]
输出：[10,100,10000,1000]


提示：

1 <= arr.length <= 500
0 <= arr[i] <= 10^4
通过次数45,283提交次数61,893
  */
class Solution {

    /**
     * @param Integer[] $arr
     * @return Integer[]
     */
    function sortByBits($arr) {
        $result = [];
        for ($i=0; $i < count($arr); $i++) $result[] = ['count' => substr_count(decbin($arr[$i]), '1'), 'val' => $arr[$i]];
        array_multisort($result, SORT_ASC);
        return array_column($result, 'val');
    }
}

$t1 = microtime(true);
/****************************... 执行代码开始 ...****************************/
$object = new Solution();

$data = [
    [0,1,2,3,4,5,6,7,8],
    [1024,512,256,128,64,32,16,8,4,2,1],
    [10000,10000],
    [2,3,5,7,11,13,17,19],
    [10,100,1000,10000]
];
for ($i=0; $i < count($data); $i++) {
    $res = $object->sortByBits($data[$i]);
    $t2 = microtime(true);
    /****************************... 执行代码结束 ...****************************/
    var_dump($res);
    echo '<hr />';
    var_dump('耗时'.round($t2-$t1,3).'秒');
    echo '<hr />';
    var_dump('Now memory_get_usage: ' . memory_get_usage());
}
