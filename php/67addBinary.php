<?php
/*
* 二进制求和
*/

/**
 * 给你两个二进制字符串，返回它们的和（用二进制表示）。
 * 输入为 非空 字符串且只包含数字 1 和 0。
 * 示例 1:
 *
 * 输入: a = "11", b = "1"
 * 输出: "100"
 * 示例 2:
 *
 * 输入: a = "1010", b = "1011"
 * 输出: "10101"
 *
 *
 * 提示：
 *
 * 每个字符串仅由字符 '0' 或 '1' 组成。
 * 1 <= a.length, b.length <= 10^4
 * 字符串如果不是 "0" ，就都不含前导零。
 */
class Solution {
    /**
     * @param String $a
     * @param String $b
     * @return String
     */
    function addBinary($a, $b) {
        // var_dump('110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000',bcadd($a, $b));die;
        var_dump(intval(round(floatval(bindec($a)) * 100)));
        // // $tmpsum = bindec($a) + bindec($b);.
        // var_dump(bcadd(bindec($a),bindec($b), 2));die;
        // var_dump('110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000' - '110090901011001009891001090109990908988990090009999899888899899910001010999999999989998899911108910');die;
        // if ($this->check($a) && $this->check($b)){
        //     if (strlen($a) >= 1 && strlen($b) <= 10000) {
        //         $res = bindec($a) + bindec($b);
        //         var_dump($res);
        //         var_dump(pack('H *',base_convert('110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000', 10,2)));die;
        //     }
        // }
    }
}
$t1 = microtime(true);
/****************************... 执行代码开始 ...****************************/
$object = new Solution();
// $a = "11";
// $b = "1";
$a =  "10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101";
$b =  "110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011";
$res = $object->addBinary($a, $b);
$t2 = microtime(true);
/****************************... 执行代码结束 ...****************************/
var_dump($res);
echo '<hr />';
var_dump('耗时'.($t2-$t1).'秒');
echo '<hr />';
var_dump('Now memory_get_usage: ' . memory_get_usage());
